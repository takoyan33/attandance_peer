import Head from "next/head";
import "tailwindcss/tailwind.css";
import { Inter } from "@next/font/google";
import { Input } from "@mantine/core";
import { useState, useEffect } from "react";
import { database } from "../../firebaseConfig";
import { collection, addDoc, onSnapshot, getDocs } from "firebase/firestore";
import { useRouter } from "next/router";
import { query, orderBy } from "firebase/firestore";
import { useForm } from "react-hook-form";
import { MuiNavbar } from "../../components/MuiNavbar";
import { InputBase } from "@mantine/core";
import {
  createStyles,
  Table,
  Checkbox,
  ScrollArea,
  Group,
  Avatar,
  Text,
} from "@mantine/core";
import Modal from "react-modal";

export default function Home() {
  const { register, handleSubmit } = useForm();
  const [title, setTitle] = useState("");
  const [meeting, setMeeting] = useState<any[]>([]);
  const [users, setUsers] = useState<any[]>([]);
  const databaseRef = collection(database, "meeting");
  const router = useRouter();
  const usersRef = collection(database, "users");
  //新しい順
  const q = query(usersRef, orderBy("timestamp", "desc"));

  const addDate = (data: any) => {
    const newdate = new Date().toLocaleString("ja-JP");
    //日本時間を代入
    //写真のurlをセットする
    addDoc(usersRef, {
      fullname: data.fullname,
      univernumber: data.univernumber,
      univeryear: data.univeryear,
      createtime: newdate,
    })
      .then(() => {
        alert("ユーザーを編集しました");
        router.push("/");
      })
      .catch((err: any) => {
        console.error(err);
      });
  };

  //ユーザーを編集する
  // const updatefields = (data: FormData) => {
  //   //更新する
  //   let fieldToEdit = doc(database, "meeting", ID);
  //   //セットしたIDをセットする
  //   updateDoc(fieldToEdit, {
  //   })
  //     .then(() => {
  //       setIsUpdate(false);
  //       setIsPresent(false);
  //       setIsOpen(false);
  //       alert("出席登録しました");
  //       router.push("/");
  //     })
  //     .catch((err) => {
  //       console.log(err);
  //     });
  // };

  useEffect(() => {
    const usersCollectionRef = collection(database, "users");
    getDocs(usersCollectionRef).then((querySnapshot) => {
      setUsers(querySnapshot.docs.map((doc) => doc.data()));
    });

    const meetingCollectionRef = collection(database, "meeting");
    getDocs(meetingCollectionRef).then((querySnapshot) => {
      setMeeting(querySnapshot.docs.map((doc) => doc.data()));
    });
  }, []);
  return (
    <>
      <Head>
        <title>出席管理</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MuiNavbar />
      <div className="max-w-5xl m-auto">
        <h2 className="text-center text-2xl font-bold mb-6 mt-10">
          ユーザーを編集する
        </h2>

        <ScrollArea sx={{ height: 500 }}>
          <Table sx={{ minWidth: 1000 }}>
            <thead>
              <tr>
                <th>名前</th>
                <th>学籍番号</th>
                <th>年次</th>
                <th>性別</th>
                <th>在籍状況</th>
                <th>編集</th>
              </tr>
            </thead>
            <tbody>
              {users &&
                users.map((user) => (
                  <tr key={user.id}>
                    <td>
                      <Group spacing="xs">
                        <Text size="sm" weight={300}>
                          {user.fullname}
                        </Text>
                      </Group>
                    </td>
                    <td>{user.univernumber}</td>
                    <td>{user.grade}</td>
                    <td>
                      <button onClick={addDate}>編集する</button>
                    </td>
                    <td>
                      <button onClick={addDate}>編集する</button>
                    </td>
                    <td>
                      <button onClick={addDate}>編集する</button>
                    </td>
                  </tr>
                ))}
            </tbody>
          </Table>
        </ScrollArea>

        {/* <div>
          <form onSubmit={handleSubmit(addDate)}>
            <div>
              <label htmlFor="fullname">名前</label>
              <Input type="text" id="fullname" {...register("fullname")} />
            </div>
            <div>
              <label htmlFor="univernumber">学籍番号</label>
              <Input
                type="number"
                id="univernumber"
                {...register("univernumber")}
              />
            </div>
            <div>
              <InputBase
                label="学年"
                component="select"
                mt="md"
                id="univeryear"
                {...register("univeryear")}
              >
                <option value="インターン">インターン</option>
                <option value="1年目">1年目</option>
                <option value="2年目">2年目</option>
                <option value="アドバイザー">アドバイザー</option>
              </InputBase>
            </div>
            <button type="submit">送信</button>
          </form>
        </div> */}
      </div>
    </>
  );
}
